name: CI
on:
  push:
    branches: [ master ]
  pull_request:

  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - uses: actions-rs/toolchain@v1
        id: rust-toolchain
        with:
          toolchain: stable
          profile: default
          override: true

      - name: Cache Cargo Artifacts
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-artifacts-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-artifacts-${{ hashFiles('**/Cargo.toml') }}
            ${{ runner.os }}-cargo-artifacts-
            ${{ runner.os }}-cargo

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p rustyboi_core --verbose

  build:
    needs: test
    name: Build release assets
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          # Linux
          - { os: ubuntu-18.04, toolchain: stable, target: x86_64-unknown-linux-gnu, cross: false }
          - { os: ubuntu-18.04, toolchain: stable, target: aarch64-unknown-linux-gnu, cross: true }
          # Raspberry Pi
          - { os: ubuntu-18.04, toolchain: stable, target: arm-unknown-linux-gnueabi, cross: true }
          - { os: ubuntu-18.04, toolchain: stable, target: armv7-unknown-linux-gnueabihf, cross: true }

          # Macos
          - { os: macos-10.15, toolchain: stable, target: x86_64-apple-darwin, cross: false }

          # Windows
          - { os: windows-2019, toolchain: stable-x86_64-pc-windows-gnu, target: x86_64-pc-windows-gnu, cross: false }
          - { os: windows-2019, toolchain: stable-x86_64-pc-windows-msvc, target: x86_64-pc-windows-msvc, cross: false }

    steps:
      - uses: actions/checkout@master

      - uses: actions-rs/toolchain@v1
        id: rust-toolchain
        with:
          toolchain: ${{ matrix.config.toolchain }}
          target: ${{ matrix.config.target }}
          profile: minimal
          override: true
          default: true

      - name: Cache Cargo Artifacts
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-build-${{ matrix.config.target }}-artifacts-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ matrix.config.target }}-artifacts-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-build-${{ matrix.config.target }}-
            ${{ runner.os }}-cargo-build-
            ${{ runner.os }}-cargo-artifacts-
            ${{ runner.os }}-cargo

      - name: Build release asset
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.config.cross }}
          command: build
          args: --release --target ${{ matrix.config.target }}

      - name: Package asset as gzip
        if: "!startsWith(matrix.config.os, 'windows')"
        run: |
          archive=Rustyboi-${{ matrix.config.target }}.tar.gz
          env GZIP=-9 tar zvcf $archive -C ./target/${{ matrix.config.target }}/release rustyboi_sdl
          cat <<EOF >> $GITHUB_ENV
          RELEASE_ARCHIVE=$archive
          RELEASE_CONTENT_TYPE=application/gzip
          EOF

      - name: Package asset as zip
        if: "startsWith(matrix.config.os, 'windows')"
        run: |
          $archive = "Rustyboi-${{ matrix.config.target }}.zip"
          Compress-Archive -LiteralPath .\target\${{ matrix.config.target }}\release\rustyboi_sdl.exe -DestinationPath $archive
          @"
          RELEASE_ARCHIVE=$archive
          RELEASE_CONTENT_TYPE=application/zip
          "@ | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Rustyboi-${{ matrix.config.target }}
          path: ${{ env.RELEASE_ARCHIVE }}
