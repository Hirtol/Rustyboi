use crate::hardware::cpu::execute::InstructionAddress::HLI;
use crate::hardware::cpu::registers::Reg16::HL;
use crate::hardware::cpu::registers::Reg8;
use crate::hardware::cpu::registers::Reg8::{A, B, C, D, E, H, L};
use crate::hardware::cpu::CPU;
use crate::hardware::mmu::MemoryMapper;

impl<M: MemoryMapper> CPU<M> {
    pub fn execute(&mut self, opcode: u8) {
        use crate::hardware::cpu::registers::Reg16::*;
        use crate::hardware::cpu::registers::Reg8::*;
        match opcode {
            0x00 => self.nop(),
            0x01 => self.load_16(BC, InstructionAddress::Direct),
            0x02 => self.load_8(InstructionAddress::BCI, A),
            0x03 => self.increment16(BC),
            0x04 => self.increment(B),
            0x05 => self.decrement(B),
            0x06 => self.load_8(B, InstructionAddress::Direct),
            0x07 => self.rlca(),
            0x08 => self.load_16(InstructionAddress::DirectMem, SP),
            0x09 => self.add16(BC),
            0x0A => self.load_8(A, InstructionAddress::BCI),
            0x0B => self.decrement16(BC),
            0x0C => self.increment(C),
            0x0D => self.decrement(C),
            0x0E => self.load_8(C, InstructionAddress::Direct),
            0x0F => self.rrca(),
            0x10 => self.stop(),
            0x11 => self.load_16(DE, InstructionAddress::Direct),
            0x12 => self.load_8(InstructionAddress::DEI, A),
            0x13 => self.increment16(DE),
            0x14 => self.increment(D),
            0x15 => self.decrement(D),
            0x16 => self.load_8(D, InstructionAddress::Direct),
            0x17 => self.rla(),
            0x18 => self.relative_jump(JumpModifier::Always),
            0x19 => self.add16(DE),
            0x1A => self.load_8(A, InstructionAddress::DEI),
            0x1B => self.decrement16(DE),
            0x1C => self.increment(E),
            0x1D => self.decrement(E),
            0x1E => self.load_8(E, InstructionAddress::Direct),
            0x1F => self.rra(),
            0x20 => self.relative_jump(JumpModifier::NotZero),
            0x21 => self.load_16(HL, InstructionAddress::Direct),
            0x22 => self.load_8(InstructionAddress::HLIP, A),
            0x23 => self.increment16(HL),
            0x24 => self.increment(H),
            0x25 => self.decrement(H),
            0x26 => self.load_8(H, InstructionAddress::Direct),
            0x27 => self.daa(),
            0x28 => self.relative_jump(JumpModifier::Zero),
            0x29 => self.add16(HL),
            0x2A => self.load_8(A, InstructionAddress::HLIP),
            0x2B => self.decrement16(HL),
            0x2C => self.increment(L),
            0x2D => self.decrement(L),
            0x2E => self.load_8(L, InstructionAddress::Direct),
            0x2F => self.cpl(),
            0x30 => self.relative_jump(JumpModifier::NotCarry),
            0x31 => self.load_16(SP, InstructionAddress::Direct),
            0x32 => self.load_8(InstructionAddress::HLIN, A),
            0x33 => self.increment16(SP),
            0x34 => self.increment(InstructionAddress::HLI),
            0x35 => self.decrement(InstructionAddress::HLI),
            0x36 => self.load_8(InstructionAddress::HLI, InstructionAddress::Direct),
            0x37 => self.scf(),
            0x38 => self.relative_jump(JumpModifier::Carry),
            0x39 => self.add16(SP),
            0x3A => self.load_8(A, InstructionAddress::HLIN),
            0x3B => self.decrement16(SP),
            0x3C => self.increment(A),
            0x3D => self.decrement(A),
            0x3E => self.load_8(A, InstructionAddress::Direct),
            0x3F => self.ccf(),
            0x40 => self.load_8(B, B),
            0x41 => self.load_8(B, C),
            0x42 => self.load_8(B, D),
            0x43 => self.load_8(B, E),
            0x44 => self.load_8(B, H),
            0x45 => self.load_8(B, L),
            0x46 => self.load_8(B, HLI),
            0x47 => self.load_8(B, A),
            0x48 => self.load_8(C, B),
            0x49 => self.load_8(C, C),
            0x4A => self.load_8(C, D),
            0x4B => self.load_8(C, E),
            0x4C => self.load_8(C, H),
            0x4D => self.load_8(C, L),
            0x4E => self.load_8(C, HLI),
            0x4F => self.load_8(C, A),
            0x50 => self.load_8(D, B),
            0x51 => self.load_8(D, C),
            0x52 => self.load_8(D, D),
            0x53 => self.load_8(D, E),
            0x54 => self.load_8(D, H),
            0x55 => self.load_8(D, L),
            0x56 => self.load_8(D, HLI),
            0x57 => self.load_8(D, A),
            0x58 => self.load_8(E, B),
            0x59 => self.load_8(E, C),
            0x5A => self.load_8(E, D),
            0x5B => self.load_8(E, E),
            0x5C => self.load_8(E, H),
            0x5D => self.load_8(E, L),
            0x5E => self.load_8(E, HLI),
            0x5F => self.load_8(E, A),
            0x60 => self.load_8(H, B),
            0x61 => self.load_8(H, C),
            0x62 => self.load_8(H, D),
            0x63 => self.load_8(H, E),
            0x64 => self.load_8(H, H),
            0x65 => self.load_8(H, L),
            0x66 => self.load_8(H, HLI),
            0x67 => self.load_8(H, A),
            0x68 => self.load_8(L, B),
            0x69 => self.load_8(L, C),
            0x6A => self.load_8(L, D),
            0x6B => self.load_8(L, E),
            0x6C => self.load_8(L, H),
            0x6D => self.load_8(L, L),
            0x6E => self.load_8(L, HLI),
            0x6F => self.load_8(L, A),
            0x70 => self.load_8(HLI, B),
            0x71 => self.load_8(HLI, C),
            0x72 => self.load_8(HLI, D),
            0x73 => self.load_8(HLI, E),
            0x74 => self.load_8(HLI, H),
            0x75 => self.load_8(HLI, L),
            0x76 => self.halt(),
            0x77 => self.load_8(HLI, A),
            0x78 => self.load_8(A, B),
            0x79 => self.load_8(A, C),
            0x7A => self.load_8(A, D),
            0x7B => self.load_8(A, E),
            0x7C => self.load_8(A, H),
            0x7D => self.load_8(A, L),
            0x7E => self.load_8(A, HLI),
            0x7F => self.load_8(A, A),
            0x80 => self.add(B),
            0x81 => self.add(C),
            0x82 => self.add(D),
            0x83 => self.add(E),
            0x84 => self.add(H),
            0x85 => self.add(L),
            0x86 => self.add(HLI),
            0x87 => self.add(A),
            0x88 => self.adc(B),
            0x89 => self.adc(C),
            0x8A => self.adc(D),
            0x8B => self.adc(E),
            0x8C => self.adc(H),
            0x8D => self.adc(L),
            0x8E => self.adc(HLI),
            0x8F => self.adc(A),
            0x90 => self.sub(B),
            0x91 => self.sub(C),
            0x92 => self.sub(D),
            0x93 => self.sub(E),
            0x94 => self.sub(H),
            0x95 => self.sub(L),
            0x96 => self.sub(HLI),
            0x97 => self.sub(A),
            0x98 => self.sbc(B),
            0x99 => self.sbc(C),
            0x9A => self.sbc(D),
            0x9B => self.sbc(E),
            0x9C => self.sbc(H),
            0x9D => self.sbc(L),
            0x9E => self.sbc(HLI),
            0x9F => self.sbc(A),
            0xA0 => self.and(B),
            0xA1 => self.and(C),
            0xA2 => self.and(D),
            0xA3 => self.and(E),
            0xA4 => self.and(H),
            0xA5 => self.and(L),
            0xA6 => self.and(HLI),
            0xA7 => self.and(A),
            0xA8 => self.xor(B),
            0xA9 => self.xor(C),
            0xAA => self.xor(D),
            0xAB => self.xor(E),
            0xAC => self.xor(H),
            0xAD => self.xor(L),
            0xAE => self.xor(HLI),
            0xAF => self.xor(A),
            0xB0 => self.or(B),
            0xB1 => self.or(C),
            0xB2 => self.or(D),
            0xB3 => self.or(E),
            0xB4 => self.or(H),
            0xB5 => self.or(L),
            0xB6 => self.or(HLI),
            0xB7 => self.or(A),
            0xB8 => self.compare(B),
            0xB9 => self.compare(C),
            0xBA => self.compare(D),
            0xBB => self.compare(E),
            0xBC => self.compare(H),
            0xBD => self.compare(L),
            0xBE => self.compare(HLI),
            0xBF => self.compare(A),
            0xC0 => self.ret(JumpModifier::NotZero),
            0xC1 => self.pop(BC),
            0xC2 => self.jump(JumpModifier::NotZero),
            0xC3 => self.jump(JumpModifier::Always),
            0xC4 => self.call(JumpModifier::NotZero),
            0xC5 => self.push(BC),
            0xC6 => self.add(InstructionAddress::Direct),
            0xC7 => self.rst(0x0),
            0xC8 => self.ret(JumpModifier::Zero),
            0xC9 => self.ret(JumpModifier::Always),
            0xCA => self.jump(JumpModifier::Zero),
            0xCB => self.cb_prefix_call(),
            0xCC => self.call(JumpModifier::Zero),
            0xCD => self.call(JumpModifier::Always),
            0xCE => self.adc(InstructionAddress::Direct),
            0xCF => self.rst(0x8),
            0xD0 => self.ret(JumpModifier::NotCarry),
            0xD1 => self.pop(DE),
            0xD2 => self.jump(JumpModifier::NotCarry),
            0xD3 => self.unknown(),
            0xD4 => self.call(JumpModifier::NotCarry),
            0xD5 => self.push(DE),
            0xD6 => self.sub(InstructionAddress::Direct),
            0xD7 => self.rst(0x10),
            0xD8 => self.ret(JumpModifier::Carry),
            0xD9 => self.reti(),
            0xDA => self.jump(JumpModifier::Carry),
            0xDB => self.unknown(),
            0xDC => self.call(JumpModifier::Carry),
            0xDD => self.unknown(),
            0xDE => self.sbc(InstructionAddress::Direct),
            0xDF => self.rst(0x18),
            0xE0 => self.load_8(InstructionAddress::IoDirect, A),
            0xE1 => self.pop(HL),
            0xE2 => self.load_8(InstructionAddress::IoC, A),
            0xE3 | 0xE4 => self.unknown(),
            0xE5 => self.push(HL),
            0xE6 => self.and(InstructionAddress::Direct),
            0xE7 => self.rst(0x20),
            0xE8 => self.add_sp(),
            0xE9 => self.jump_hl(),
            0xEA => self.load_8(InstructionAddress::DirectMem, A),
            0xEB..=0xED => self.unknown(),
            0xEE => self.xor(InstructionAddress::Direct),
            0xEF => self.rst(0x28),
            0xF0 => self.load_8(A, InstructionAddress::IoDirect),
            0xF1 => self.pop(AF),
            0xF2 => self.load_8(A, InstructionAddress::IoC),
            0xF3 => self.di(),
            0xF4 => self.unknown(),
            0xF5 => self.push(AF),
            0xF6 => self.or(InstructionAddress::Direct),
            0xF7 => self.rst(0x30),
            0xF8 => self.load_sp_i(),
            0xF9 => self.load_sp_hl(),
            0xFA => self.load_8(A, InstructionAddress::DirectMem),
            0xFB => self.ei(),
            0xFC | 0xFD => self.unknown(),
            0xFE => self.compare(InstructionAddress::Direct),
            0xFF => self.rst(0x38),
            _ => panic!("Unknown instruction code encountered: {:X}", opcode),
        }
    }

    pub fn execute_prefix(&mut self, opcode: u8) {
        match opcode {
            0x00 => self.rlc(B),
            0x01 => self.rlc(C),
            0x02 => self.rlc(D),
            0x03 => self.rlc(E),
            0x04 => self.rlc(H),
            0x05 => self.rlc(L),
            0x06 => self.rlc(HLI),
            0x07 => self.rlc(A),
            0x08 => self.rrc(B),
            0x09 => self.rrc(C),
            0x0A => self.rrc(D),
            0x0B => self.rrc(E),
            0x0C => self.rrc(H),
            0x0D => self.rrc(L),
            0x0E => self.rrc(HLI),
            0x0F => self.rrc(A),
            0x10 => self.rl(B),
            0x11 => self.rl(C),
            0x12 => self.rl(D),
            0x13 => self.rl(E),
            0x14 => self.rl(H),
            0x15 => self.rl(L),
            0x16 => self.rl(HLI),
            0x17 => self.rl(A),
            0x18 => self.rr(B),
            0x19 => self.rr(C),
            0x1A => self.rr(D),
            0x1B => self.rr(E),
            0x1C => self.rr(H),
            0x1D => self.rr(L),
            0x1E => self.rr(HLI),
            0x1F => self.rr(A),
            0x20 => self.sla(B),
            0x21 => self.sla(C),
            0x22 => self.sla(D),
            0x23 => self.sla(E),
            0x24 => self.sla(H),
            0x25 => self.sla(L),
            0x26 => self.sla(HLI),
            0x27 => self.sla(A),
            0x28 => self.sra(B),
            0x29 => self.sra(C),
            0x2A => self.sra(D),
            0x2B => self.sra(E),
            0x2C => self.sra(H),
            0x2D => self.sra(L),
            0x2E => self.sra(HLI),
            0x2F => self.sra(A),
            0x30 => self.swap(B),
            0x31 => self.swap(C),
            0x32 => self.swap(D),
            0x33 => self.swap(E),
            0x34 => self.swap(H),
            0x35 => self.swap(L),
            0x36 => self.swap(HLI),
            0x37 => self.swap(A),
            0x38 => self.srl(B),
            0x39 => self.srl(C),
            0x3A => self.srl(D),
            0x3B => self.srl(E),
            0x3C => self.srl(H),
            0x3D => self.srl(L),
            0x3E => self.srl(HLI),
            0x3F => self.srl(A),
            0x40 => self.bit(0, B),
            0x41 => self.bit(0, C),
            0x42 => self.bit(0, D),
            0x43 => self.bit(0, E),
            0x44 => self.bit(0, H),
            0x45 => self.bit(0, L),
            0x46 => self.bit(0, HLI),
            0x47 => self.bit(0, A),
            0x48 => self.bit(1, B),
            0x49 => self.bit(1, C),
            0x4A => self.bit(1, D),
            0x4B => self.bit(1, E),
            0x4C => self.bit(1, H),
            0x4D => self.bit(1, L),
            0x4E => self.bit(1, HLI),
            0x4F => self.bit(1, A),
            0x50 => self.bit(2, B),
            0x51 => self.bit(2, C),
            0x52 => self.bit(2, D),
            0x53 => self.bit(2, E),
            0x54 => self.bit(2, H),
            0x55 => self.bit(2, L),
            0x56 => self.bit(2, HLI),
            0x57 => self.bit(2, A),
            0x58 => self.bit(3, B),
            0x59 => self.bit(3, C),
            0x5A => self.bit(3, D),
            0x5B => self.bit(3, E),
            0x5C => self.bit(3, H),
            0x5D => self.bit(3, L),
            0x5E => self.bit(3, HLI),
            0x5F => self.bit(3, A),
            0x60 => self.bit(4, B),
            0x61 => self.bit(4, C),
            0x62 => self.bit(4, D),
            0x63 => self.bit(4, E),
            0x64 => self.bit(4, H),
            0x65 => self.bit(4, L),
            0x66 => self.bit(4, HLI),
            0x67 => self.bit(4, A),
            0x68 => self.bit(5, B),
            0x69 => self.bit(5, C),
            0x6A => self.bit(5, D),
            0x6B => self.bit(5, E),
            0x6C => self.bit(5, H),
            0x6D => self.bit(5, L),
            0x6E => self.bit(5, HLI),
            0x6F => self.bit(5, A),
            0x70 => self.bit(6, B),
            0x71 => self.bit(6, C),
            0x72 => self.bit(6, D),
            0x73 => self.bit(6, E),
            0x74 => self.bit(6, H),
            0x75 => self.bit(6, L),
            0x76 => self.bit(6, HLI),
            0x77 => self.bit(6, A),
            0x78 => self.bit(7, B),
            0x79 => self.bit(7, C),
            0x7A => self.bit(7, D),
            0x7B => self.bit(7, E),
            0x7C => self.bit(7, H),
            0x7D => self.bit(7, L),
            0x7E => self.bit(7, HLI),
            0x7F => self.bit(7, A),
            0x80 => self.res(0, B),
            0x81 => self.res(0, C),
            0x82 => self.res(0, D),
            0x83 => self.res(0, E),
            0x84 => self.res(0, H),
            0x85 => self.res(0, L),
            0x86 => self.res(0, HLI),
            0x87 => self.res(0, A),
            0x88 => self.res(1, B),
            0x89 => self.res(1, C),
            0x8A => self.res(1, D),
            0x8B => self.res(1, E),
            0x8C => self.res(1, H),
            0x8D => self.res(1, L),
            0x8E => self.res(1, HLI),
            0x8F => self.res(1, A),
            0x90 => self.res(2, B),
            0x91 => self.res(2, C),
            0x92 => self.res(2, D),
            0x93 => self.res(2, E),
            0x94 => self.res(2, H),
            0x95 => self.res(2, L),
            0x96 => self.res(2, HLI),
            0x97 => self.res(2, A),
            0x98 => self.res(3, B),
            0x99 => self.res(3, C),
            0x9A => self.res(3, D),
            0x9B => self.res(3, E),
            0x9C => self.res(3, H),
            0x9D => self.res(3, L),
            0x9E => self.res(3, HLI),
            0x9F => self.res(3, A),
            0xA0 => self.res(4, B),
            0xA1 => self.res(4, C),
            0xA2 => self.res(4, D),
            0xA3 => self.res(4, E),
            0xA4 => self.res(4, H),
            0xA5 => self.res(4, L),
            0xA6 => self.res(4, HLI),
            0xA7 => self.res(4, A),
            0xA8 => self.res(5, B),
            0xA9 => self.res(5, C),
            0xAA => self.res(5, D),
            0xAB => self.res(5, E),
            0xAC => self.res(5, H),
            0xAD => self.res(5, L),
            0xAE => self.res(5, HLI),
            0xAF => self.res(5, A),
            0xB0 => self.res(6, B),
            0xB1 => self.res(6, C),
            0xB2 => self.res(6, D),
            0xB3 => self.res(6, E),
            0xB4 => self.res(6, H),
            0xB5 => self.res(6, L),
            0xB6 => self.res(6, HLI),
            0xB7 => self.res(6, A),
            0xB8 => self.res(7, B),
            0xB9 => self.res(7, C),
            0xBA => self.res(7, D),
            0xBB => self.res(7, E),
            0xBC => self.res(7, H),
            0xBD => self.res(7, L),
            0xBE => self.res(7, HLI),
            0xBF => self.res(7, A),
            0xC0 => self.set(0, B),
            0xC1 => self.set(0, C),
            0xC2 => self.set(0, D),
            0xC3 => self.set(0, E),
            0xC4 => self.set(0, H),
            0xC5 => self.set(0, L),
            0xC6 => self.set(0, HLI),
            0xC7 => self.set(0, A),
            0xC8 => self.set(1, B),
            0xC9 => self.set(1, C),
            0xCA => self.set(1, D),
            0xCB => self.set(1, E),
            0xCC => self.set(1, H),
            0xCD => self.set(1, L),
            0xCE => self.set(1, HLI),
            0xCF => self.set(1, A),
            0xD0 => self.set(2, B),
            0xD1 => self.set(2, C),
            0xD2 => self.set(2, D),
            0xD3 => self.set(2, E),
            0xD4 => self.set(2, H),
            0xD5 => self.set(2, L),
            0xD6 => self.set(2, HLI),
            0xD7 => self.set(2, A),
            0xD8 => self.set(3, B),
            0xD9 => self.set(3, C),
            0xDA => self.set(3, D),
            0xDB => self.set(3, E),
            0xDC => self.set(3, H),
            0xDD => self.set(3, L),
            0xDE => self.set(3, HLI),
            0xDF => self.set(3, A),
            0xE0 => self.set(4, B),
            0xE1 => self.set(4, C),
            0xE2 => self.set(4, D),
            0xE3 => self.set(4, E),
            0xE4 => self.set(4, H),
            0xE5 => self.set(4, L),
            0xE6 => self.set(4, HLI),
            0xE7 => self.set(4, A),
            0xE8 => self.set(5, B),
            0xE9 => self.set(5, C),
            0xEA => self.set(5, D),
            0xEB => self.set(5, E),
            0xEC => self.set(5, H),
            0xED => self.set(5, L),
            0xEE => self.set(5, HLI),
            0xEF => self.set(5, A),
            0xF0 => self.set(6, B),
            0xF1 => self.set(6, C),
            0xF2 => self.set(6, D),
            0xF3 => self.set(6, E),
            0xF4 => self.set(6, H),
            0xF5 => self.set(6, L),
            0xF6 => self.set(6, HLI),
            0xF7 => self.set(6, A),
            0xF8 => self.set(7, B),
            0xF9 => self.set(7, C),
            0xFA => self.set(7, D),
            0xFB => self.set(7, E),
            0xFC => self.set(7, H),
            0xFD => self.set(7, L),
            0xFE => self.set(7, HLI),
            0xFF => self.set(7, A),
            _ => panic!("Unknown prefix instruction code encountered: {:X}", opcode),
        }
    }
}

#[derive(Debug, Copy, Clone)]
pub enum InstructionAddress {
    BCI,
    DEI,
    HLI,
    HLIP,
    HLIN,
    Direct,
    DirectMem,
    IoDirect,
    IoC,
}

/// Only exists to make the instruction decoding a bit less of a hassle
#[derive(Debug, Copy, Clone)]
pub enum WrapperEnum {
    Reg8(Reg8),
    InstructionAddress(InstructionAddress),
}

pub fn horizontal_decode(opcode: u8) -> WrapperEnum {
    let relevant_nibble = (opcode & 0x0F) % 0x8;
    match relevant_nibble {
        0x0 => WrapperEnum::Reg8(Reg8::B),
        0x1 => WrapperEnum::Reg8(Reg8::C),
        0x2 => WrapperEnum::Reg8(Reg8::D),
        0x3 => WrapperEnum::Reg8(Reg8::E),
        0x4 => WrapperEnum::Reg8(Reg8::H),
        0x5 => WrapperEnum::Reg8(Reg8::L),
        0x6 => WrapperEnum::InstructionAddress(InstructionAddress::HLI),
        0x7 => WrapperEnum::Reg8(Reg8::A),
        // This should never be called, unless maths has broken down.
        _ => panic!("Invalid Nibble found: {:X}", relevant_nibble),
    }
}

pub fn vertical_decode(opcode: u8) -> WrapperEnum {
    let relevant_nibble = (opcode & 0xF0) >> 4;
    let lower_nibble = opcode & 0x0F;
    match relevant_nibble {
        0x4 if lower_nibble < 0x8 => WrapperEnum::Reg8(Reg8::B),
        0x4 if lower_nibble >= 0x8 => WrapperEnum::Reg8(Reg8::C),
        0x5 if lower_nibble < 0x8 => WrapperEnum::Reg8(Reg8::D),
        0x5 if lower_nibble >= 0x8 => WrapperEnum::Reg8(Reg8::E),
        0x6 if lower_nibble < 0x8 => WrapperEnum::Reg8(Reg8::H),
        0x6 if lower_nibble >= 0x8 => WrapperEnum::Reg8(Reg8::L),
        0x7 if lower_nibble < 0x8 => WrapperEnum::InstructionAddress(InstructionAddress::HLI),
        0x7 if lower_nibble >= 0x8 => WrapperEnum::Reg8(Reg8::A),
        _ => panic!("Invalid Nibble found: {:X}", relevant_nibble),
    }
}

#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub enum JumpModifier {
    NotZero,
    Zero,
    NotCarry,
    Carry,
    Always,
}
