//! Deprecated as it turned out to be more trouble than it was worth
//! for the small bit of extra clarity that an enum would provide
//! Keep around in case we want to turn back.

use crate::hardware::cpu::execute::{
    horizontal_decode, vertical_decode, InstructionAddress, JumpModifier,
};
use crate::hardware::registers::Reg16;
use crate::hardware::registers::Reg16::*;
use crate::hardware::registers::Reg8::*;

pub fn get_assembly_from_opcode(opcode: u8) -> String {
    match opcode {
        0x00 => "nop".to_string(),
        0x01 => format!("load_16bit {:?} {:?}", BC, InstructionAddress::DIRECT),
        0x02 => format!("load_8bit {:?} {:?}", InstructionAddress::BCI, A),
        0x03 => format!("increment16 {:?}", BC),
        0x04 => format!("increment {:?}", B),
        0x05 => format!("decrement {:?}", B),
        0x06 => format!("load_8bit {:?} {:?}", B, InstructionAddress::DIRECT),
        0x07 => "rlca".to_string(),
        0x08 => format!("load_16bit {:?} {:?}", InstructionAddress::DirectMem, SP),
        0x09 => format!("add_16bit {:?} ", BC),
        0x0A => format!("load_8bit {:?} {:?}", A, InstructionAddress::BCI),
        0x0B => format!("decrement16 {:?}", BC),
        0x0C => format!("increment {:?}", C),
        0x0D => format!("decrement {:?}", C),
        0x0E => format!("load_8bit {:?} {:?}", C, InstructionAddress::DIRECT),
        0x0F => "rrca".to_string(),
        0x10 => "stop".to_string(),
        0x11 => format!("load_16bit {:?} {:?}", DE, InstructionAddress::DIRECT),
        0x12 => format!("load_8bit {:?} {:?}", InstructionAddress::DEI, A),
        0x13 => format!("increment16 {:?}", DE),
        0x14 => format!("increment {:?}", D),
        0x15 => format!("decrement {:?}", D),
        0x16 => format!("load_8bit {:?} {:?}", D, InstructionAddress::DIRECT),
        0x17 => "rla".to_string(),
        0x18 => format!("relative_jump {:?}", JumpModifier::Always),
        0x19 => format!("add_16bit {:?}", DE),
        0x1A => format!("load_8bit {:?} {:?}", A, InstructionAddress::DEI),
        0x1B => format!("decrement16 {:?}", DE),
        0x1C => format!("increment {:?}", E),
        0x1D => format!("decrement {:?}", E),
        0x1E => format!("load_8bit {:?} {:?}", E, InstructionAddress::DIRECT),
        0x1F => "rra".to_string(),
        0x20 => format!("relative_jump {:?}", JumpModifier::NotZero),
        0x21 => format!("load_16bit {:?} {:?}", HL, InstructionAddress::DIRECT),
        0x22 => format!("load_8bit {:?} {:?}", InstructionAddress::HLIP, A),
        0x23 => format!("increment16 {:?}", HL),
        0x24 => format!("increment {:?}", H),
        0x25 => format!("decrement {:?}", H),
        0x26 => format!("load_8bit {:?} {:?}", H, InstructionAddress::DIRECT),
        0x27 => "daa".to_string(),
        0x28 => format!("relative_jump {:?}", JumpModifier::Zero),
        0x29 => format!("add_16bit {:?}", HL),
        0x2A => format!("load_8bit {:?} {:?}", A, InstructionAddress::HLIP),
        0x2B => format!("decrement16 {:?}", HL),
        0x2C => format!("increment {:?}", L),
        0x2D => format!("decrement {:?}", L),
        0x2E => format!("load_8bit {:?} {:?}", L, InstructionAddress::DIRECT),
        0x2F => "cpl".to_string(),
        0x30 => format!("relative_jump {:?}", JumpModifier::NotCarry),
        0x31 => format!("load_16bit {:?} {:?}", SP, InstructionAddress::DIRECT),
        0x32 => format!("load_8bit {:?} {:?}", InstructionAddress::HLIN, A),
        0x33 => format!("increment16 {:?}", SP),
        0x34 => format!("increment {:?}", InstructionAddress::HLI),
        0x35 => format!("decrement {:?}", InstructionAddress::HLI),
        0x36 => format!(
            "load_8bit {:?} {:?}",
            InstructionAddress::HLI,
            InstructionAddress::DIRECT
        ),
        0x37 => "scf".to_string(),
        0x38 => format!("relative_jump {:?}", JumpModifier::Carry),
        0x39 => format!("add_16bit {:?}", SP),
        0x3A => format!("load_8bit {:?} {:?}", A, InstructionAddress::HLIN),
        0x3B => format!("decrement16 {:?}", SP),
        0x3C => format!("increment {:?}", A),
        0x3D => format!("decrement {:?}", A),
        0x3E => format!("load_8bit {:?} {:?}", A, InstructionAddress::DIRECT),
        0x3F => "ccf".to_string(),
        0x40..=0x75 => format!(
            "load_8bit {:?} {:?}",
            vertical_decode(opcode),
            horizontal_decode(opcode)
        ),
        0x76 => "halt".to_string(),
        0x77..=0x7F => format!(
            "load_8bit {:?} {:?}",
            vertical_decode(opcode),
            horizontal_decode(opcode)
        ),
        0x80..=0x87 => format!("add {:?}", horizontal_decode(opcode)),
        0x88..=0x8F => format!("adc {:?}", horizontal_decode(opcode)),
        0x90..=0x97 => format!("sub {:?}", horizontal_decode(opcode)),
        0x98..=0x9F => format!("sbc {:?}", horizontal_decode(opcode)),
        0xA0..=0xA7 => format!("and {:?}", horizontal_decode(opcode)),
        0xA8..=0xAF => format!("xor {:?}", horizontal_decode(opcode)),
        0xB0..=0xB7 => format!("or {:?}", horizontal_decode(opcode)),
        0xB8..=0xBF => format!("compare {:?}", horizontal_decode(opcode)),
        0xC0 => format!("ret {:?}", JumpModifier::NotZero),
        0xC1 => format!("pop {:?}", BC),
        0xC2 => format!("jump {:?}", JumpModifier::NotZero),
        0xC3 => format!("jump {:?}", JumpModifier::Always),
        0xC4 => format!("call {:?}", JumpModifier::NotZero),
        0xC5 => format!("push {:?}", BC),
        0xC6 => format!("add {:?}", InstructionAddress::DIRECT),
        0xC7 => format!("rst {:?}", 0x0),
        0xC8 => format!("ret {:?}", JumpModifier::Zero),
        0xC9 => format!("ret {:?}", JumpModifier::Always),
        0xCA => format!("jump {:?}", JumpModifier::Zero),
        0xCB => format!("CB"),
        0xCC => format!("call {:?}", JumpModifier::Zero),
        0xCD => format!("call {:?}", JumpModifier::Always),
        0xCE => format!("adc {:?}", InstructionAddress::DIRECT),
        0xCF => format!("rst {:?}", 0x8),
        0xD0 => format!("ret {:?}", JumpModifier::NotCarry),
        0xD1 => format!("pop {:?}", DE),
        0xD2 => format!("jump {:?}", JumpModifier::NotCarry),
        0xD3 => "unknown".to_string(),
        0xD4 => format!("call {:?}", JumpModifier::NotCarry),
        0xD5 => format!("push {:?}", DE),
        0xD6 => format!("sub {:?}", InstructionAddress::DIRECT),
        0xD7 => format!("rst {:?}", 0x10),
        0xD8 => format!("ret {:?}", JumpModifier::Carry),
        0xD9 => "reti".to_string(),
        0xDA => format!("jump {:?}", JumpModifier::Carry),
        0xDB => "unknown".to_string(),
        0xDC => format!("call {:?}", JumpModifier::Carry),
        0xDD => "unknown".to_string(),
        0xDE => format!("sbc {:?}", InstructionAddress::DIRECT),
        0xDF => format!("rst {:?}", 0x18),
        0xE0 => format!("load_8bit {:?} {:?}", InstructionAddress::IoDirect, A),
        0xE1 => format!("pop {:?}", HL),
        0xE2 => format!("load_8bit {:?} {:?}", InstructionAddress::IoC, A),
        0xE3 | 0xE4 => "unknown".to_string(),
        0xE5 => format!("push {:?}", HL),
        0xE6 => format!("and {:?}", InstructionAddress::DIRECT),
        0xE7 => format!("rst {:?}", 0x20),
        0xE8 => "add SP i8".to_string(),
        0xE9 => format!("jump {:?}", JumpModifier::HL),
        0xEA => format!("load_8bit {:?} {:?}", InstructionAddress::DirectMem, A),
        0xEB..=0xED => "unknown".to_string(),
        0xEE => format!("xor {:?}", InstructionAddress::DIRECT),
        0xEF => format!("rst {:?}", 0x28),
        0xF0 => format!("load_8bit {:?} {:?}", A, InstructionAddress::IoDirect),
        0xF1 => format!("pop {:?}", AF),
        0xF2 => format!("load_8bit {:?} {:?}", A, InstructionAddress::IoC),
        0xF3 => "di".to_string(),
        0xF4 => "unknown".to_string(),
        0xF5 => format!("push {:?}", AF),
        0xF6 => format!("or {:?}", InstructionAddress::DIRECT),
        0xF7 => format!("rst {:?}", 0x30),
        0xF8 => "load HL SP+i8".to_string(),
        0xF9 => format!("load_16bit {:?} {:?}", SP, HL),
        0xFA => format!("load_8bit {:?} {:?}", A, InstructionAddress::DirectMem),
        0xFB => "ei".to_string(),
        0xFC | 0xFD => "unknown".to_string(),
        0xFE => format!("compare {:?}", InstructionAddress::DIRECT),
        0xFF => format!("rst {:?}", 0x38),
        _ => panic!("Unknown instruction code encountered: {:X}", opcode),
    }
}
